import{d as r,r as e,o as m,c as t,a as o,u as p}from"./index-34d20d4c.js";const s=`## 页面布局单位\r
\r
#### 一、介绍\r
\r
传统的项目开发中，我们只会用到\`px\`、\`%\`、\`em\`这几个单位，它可以适用于大部分的项目开发，且拥有比较良好的兼容性\r
\r
从\`CSS3\`开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了\`rem\`、\`vh\`、\`vw\`、\`vm\`等一些新的计量单位\r
\r
利用这些新的单位开发出比较良好的响应式页面，适应多种不同分辨率的终端，包括移动设备等\r
\r
#### 二、单位\r
\r
|   CSS单位    |                                        |\r
| :----------: | :------------------------------------: |\r
| 相对长度单位 | em、ex、ch、rem、vw、vh、vmin、vmax、% |\r
| 绝对长度单位 |         cm、mm、in、px、pt、pc         |\r
\r
##### px\r
\r
px，表示像素，所谓像素就是呈现在我们显示器上的一个个小点，每个像素点都是大小等同的，所以像素为计量单位被分在了绝对长度单位中\r
\r
有些人会把\`px\`认为是相对长度，原因在于在移动端中存在设备像素比，\`px\`实际显示的大小是不确定的\r
\r
这里之所以认为\`px\`为绝对单位，在于\`px\`的大小和元素的其他属性无关\r
\r
##### em\r
\r
em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（\`1em = 16px\`）\r
\r
为了简化 \`font-size\` 的换算，我们需要在\`css\`中的 \`body\` 选择器中声明\`font-size\`= \`62.5%\`，这就使 em 值变为 \`16px*62.5% = 10px\`\r
\r
这样 \`12px = 1.2em\`, \`10px = 1em\`, 也就是说只需要将你的原来的\`px\` 数值除以 10，然后换上 \`em\`作为单位就行了\r
\r
特点：\r
\r
- em 的值并不是固定的\r
- em 会继承父级元素的字体大小\r
- em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸\r
- 任意浏览器的默认字体高都是 16px\r
\r
##### rem\r
\r
rem，相对单位，相对的只是HTML根元素\`font-size\`的值\r
\r
同理，如果想要简化\`font-size\`的转化，我们可以在根元素\`html\`中加入\`font-size: 62.5%\`\r
\r
\`\`\`css\r
html {font-size: 62.5%;  } /*  公式16px*62.5%=10px  */ \r
\`\`\`\r
\r
这样页面中1rem=10px、1.2rem=12px、1.4rem=14px、1.6rem=16px;使得视觉、使用、书写都得到了极大的帮助\r
\r
特点：\r
\r
- rem单位可谓集相对大小和绝对大小的优点于一身\r
- 和em不同的是rem总是相对于根元素，而不像em一样使用级联的方式来计算尺寸\r
\r
##### vh、vw\r
\r
vw ，就是根据窗口的宽度，分成100等份，100vw就表示满宽，50vw就表示一半宽。（vw 始终是针对窗口的宽），同理，\`vh\`则为窗口的高度\r
\r
这里的窗口分成几种情况：\r
\r
- 在桌面端，指的是浏览器的可视区域\r
- 移动端指的就是布局视口\r
\r
像\`vw\`、\`vh\`，比较容易混淆的一个单位是\`%\`，不过百分比宽泛的讲是相对于父元素：\r
\r
- 对于普通定位元素就是我们理解的父元素\r
- 对于position: absolute;的元素是相对于已定位的父元素\r
- 对于position: fixed;的元素是相对于 ViewPort（可视窗口）\r
`,x={class:"mdlist"},_=r({__name:"Resolution-px",setup(i){return(v,c)=>{const n=e("v-md-preview");return m(),t("div",x,[o(n,{text:p(s)},null,8,["text"])])}}});export{_ as default};
